---
# file: site.yml
- hosts: web-servers
  remote_user: '{{ glass_user }}'
  become: yes

  tasks:
  #role:base
  - name: Install essential utils
    apt: name={{ item }} state=latest
    with_items:
      - nano
      - joe
      - git
      - vim
      - emacs
      - screen
      - tmux
      - molly-guard
      - links
      - eatmydata
      - etckeeper
      - mlocate

  - name: Set nano as default editor
    alternatives:
      name: editor
      path: /bin/nano

  - name: Install build-essential
    apt: name=build-essential state=latest

  - name: Create bin directory in /root/ for storing util scripts
    file:
      path: /root/bin
      state: directory
      owner: root
      group: root
      mode: 0700
      recurse: yes

  #role:efs
  # This temporarily sets up our EFS mounts in fstab.
  # This will cause mount failures on your machine if you do not have access to our AWS VPC as it tries to mount on boot.
  # Fortunately this degrades fairly gracefully on Ubuntu 16.04 and Debian 8 and later, still allowing the machine to
  # finish booting, but you shouldn't run this on a machine you care a lot about.
  # "auto" mounts currently failing on boot, w/90 second timeout. autofs might be a solution.

  - name: Install NFS utilities
    apt: name=nfs-common state=latest

  - name: Ensure EFS mount points exist
    file:
      path: "{{ item }}"
      state: directory
      owner: root
      group: root
      mode: 0755
    with_items: 
      - /srv/efs
      - /srv/backup

  - name: Setup PLUG-General EFS mount
    mount:
      name: /srv/efs
      src: fs-9e936fa7.efs.ap-southeast-2.amazonaws.com:/
      fstype: nfs4
      opts: noauto,_netdev,nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2
      state: present

  - name: Setup PLUG-Backup EFS mount
    mount:
      name: /srv/backup
      src: fs-2f718d16.efs.ap-southeast-2.amazonaws.com:/
      fstype: nfs4
      opts: noauto,_netdev,nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2
      state: present

  #role:web-servers
  - name: Install nginx
    apt: name=nginx state=latest

  - name: Configure nginx
    template: src=nginx/nginx.conf dest=/etc/nginx/nginx.conf
    notify:
    - reload nginx

  - name: Configure default webpage
    template: src=nginx/default.html dest=/var/www/html/index.html

  - name: Install certbot
    apt: name=certbot state=latest

  - name: Install certbot nginx plugin
    apt: name=python-certbot-nginx state=latest

  #role:borgbackup
  - name: Install Borg backup utility and dependencies
    apt: name={{ item }} state=latest
    with_items:
      - borgbackup
      - fuse

  - name: Create Borg backup script
    template:
      src: borgbackup/borgauto.sh.j2
      dest: /root/bin/borgauto.sh
      owner: root
      group: root
      mode: 0700

  - name: Create Borg restore script
    template:
      src: borgbackup/brestore.sh.j2
      dest: /root/bin/brestore.sh
      owner: root
      group: root
      mode: 0700

  - name: Ensure Borg log file directory exists
    file:
      path: /var/log/borgbackup/
      state: directory
      owner: root
      group: adm
      mode: 0755

  - name: Users - Create the 'borg-power' user for backups
    user:
      name: borg-power
      shell: /bin/bash
      home: /srv/backup/borg-power
      createhome: no
      uid: 10001
      comment: "power backup user"

  - name: SSH - Add borg-power public key
    authorized_key: user='borg-power' key="{{ lookup('file', 'secrets/ssh/borg-power.pub') }}"

  #role:plug-website
  - name: Install jekyll
    apt: name=jekyll state=latest

  - name: Use Git to checkout latest plug website
    git: version="master" repo="https://github.com/plugorgau/plugorgau.github.io.git" dest="/home/glass/plugorgau.github.io/"
    become_user: glass
    register: plug_website_git

  - name: Use Jekyll to build plug website
    command: "jekyll build"
    args: 
      chdir: /home/glass/plugorgau.github.io/
    become_user: glass
    when: plug_website_git.changed
    register: plug_website_new_build

  - name: Use rsync + a script to destructively update running site
    shell: bash /home/glass/plugorgau.github.io/deploy.sh
    when: plug_website_new_build.changed

#  - name: Use rsync destructively to update running site
#    synchronize:
#      src: /home/glass/plugorgau.github.io/_site/
#      dest: /var/www/bayonet.plug.org.au/
#      delete: yes
#      recursive: yes
#    become_user: www-data
#    when: plug_website_new_build.changed

  - name: Install nginx site config
    template: 
      src: plug-website/plug.org.au.conf
      dest: /etc/nginx/sites-available/plug.org.au.conf
    notify: reload nginx

  - name: Enable nginx site config
    file:
      state: link 
      src: ../sites-available/plug.org.au.conf
      dest: /etc/nginx/sites-enabled/plug.org.au.conf
    notify: reload nginx

  #role:ldap
  - name: Install LDAP server
    apt: name=slapd state=latest

  - name: Install useful LDAP utils
    apt: name=ldap-utils state=latest

  #role:php
  - name: PHP - Install php-fpm
    apt: name=php7.0-fpm
    # TODO Configure php-fpm

  #role:ugmm
  - name: UGMM - Install smarty3 templating engine
    apt: name=smarty3 state=latest

  - name: UGMM - Install LDAP PHP module
    apt: name=php7.0-ldap state=latest
    # TODO nginx cofig
    # TODO php pool?

  #role:mail-mta
  - name: Install MTA-relevant packages
    apt: name={{ item }} state=latest
    with_items:
      - mutt
      - swaks

  - name: Install exim4
    apt: name=exim4-daemon-light

  - name: Preconfigure exim4
    template:
      src: mail-mta/update-exim4.conf.conf.j2
      dest: /etc/exim4/update-exim4.conf.conf
      owner: root
      group: root
      mode: 0644
    notify: "update exim4 config"

  #role:mailman
  - name: Install Mailman
    apt: name=mailman state=latest

  # TODO
  #- debconf: name='exim4-config' question='exim4/dc_local_interfaces' value='' vtype='string'
  #  # notify: reconfigure exim4

  #role:fail2ban
  - name: Install fail2ban and dependencies
    apt: name={{ item }} state=latest
    with_items:
      - fail2ban
      - python3-pyinotify

  - name: Configure fail2ban
    template: src=fail2ban/jail.local.j2 dest=/etc/fail2ban/jail.local
    notify: reload fail2ban

  #role:mumble-servers
  - name: Install Mumble
    apt: name=mumble-server state=latest

  #role:icecast
  - name: Install Icecast
    apt: name=icecast2 state=latest

  - name: Configure Icecast
    template:
      src: icecast/icecast.xml.j2
      dest: /etc/icecast2/icecast.xml
      owner: icecast2
      group: icecast
      mode: 0660
    notify: restart icecast

  - name: Enable Icecast
    lineinfile:
      name: /etc/default/icecast2
      regexp: '^ENABLE='
      line: 'ENABLE=true'
    notify: start icecast

  #TODO: Move this to its own file
  handlers:
    - name: reload nginx
      service: name=nginx state=reloaded

#      notify: install certbot nginx plugin
#    - name: install certbot nginx plugin
#      apt: name=python-certbot-nginx state=latest

    - name: reconfigure exim4
      command: dpkg-reconfigure -f noninteractive exim4-config
      listen: "update exim4 config"

    - name: restart exim4
      service: name=exim4 state=restarted
      listen: "update exim4 config"

    - name: reload fail2ban
      service: name=fail2ban state=reloaded

    - name: start icecast
      service: name=icecast2 state=started

    - name: restart icecast
      service: name=icecast2 state=restarted
